# ################################################################# #

-1 1 u-shift-down GraphElemSize /modu drop  constant: TheoreticalMaxGraphSize

variable: _real-index
variable: index-size
variable: bool-flag

true bool-flag !


: oilr-index $( n -- addr )  _real-index @ call ;

# NOTE: bytes->elems gives the number of elems that will fit into 
#   bytes of space. There may be space left over. note also the
#   unsigned shift.
: bytes->elems  $( bytes -- n-elems )  GraphElemShift u-shift-down ;

: elems  $( n -- bytes ) GraphElemShift shift-up  ;
' elems alias: elem

: next-elem  $( elem -- elem+1 )  1 elem after   ;

# backtracking-stack primitives
16 MB constant: BStackSize
BStackSize buffer constant: b-stack-max
b-stack-max BStackSize + constant: b-stack
variable: bsp
b-stack bsp !

# The b-stack is executable. Executing it undoes the changes it documents
# if bool-flag is false or frees preserved resources
: b-return  ip@ bsp !  trash  ;
: b-push  bsp @   1 cell before stash !   pop bsp !  ;
: b-call  DoAddr b-push  bsp @  call ;


# Index structure:  |  next  |  count
struct: dl-list
	1 cell: .first
	1 cell: .len
end-struct

: ->first .first @ ;
: ->len  .len  @ ;

# List item structure:   |  next  |  head  |  prev
struct: dl-list-item
	1 cell: .next
	1 cell: .head
	1 cell: .prev
end-struct

: ->next .next @ ;
: ->prev .prev @ ;
: ->head .head @ ;


: ->elem  $( list -- elem )  GraphElemMask and  ;

# Elem Structure   |  flags  | label | ...
struct: graph-elem
	1 cell: .elem-flags
	1 cell: .elem-label
end-struct
: .elem-flags  ;  #immediate  # save an instruction or two

struct: graph-node
	graph-elem bytes:   .node-elem
	dl-list-item bytes: .node-index
	dl-list bytes:      .node-out-edges
	dl-list bytes:      .node-in-edges
	dl-list bytes:      .node-loops
end-struct
? graph-node   11 cells   =   assertion: graph-node is 11 cells

struct: graph-edge
	graph-elem bytes:   .edge-elem
	1 cell:             .edge-src
	1 cell:             .edge-tgt
	dl-list-item bytes: .edge-in-list
	dl-list-item bytes: .edge-out-list
end-struct
? graph-edge   10 cells   =   assertion: graph-edge is 10 cells

: ->src  .edge-src @  ;
: ->tgt  .edge-tgt @  ;

: alloc-elem  $(  -- elem )
	freelist @ dup  if
		dup @ freelist !
	else
		use-dict
		drop here GraphElemSize allot
		use-anon
	endif 
;
: free-elem   $(  elem --  )
	freelist @ over !
	freelist !
;

: available-space   $( -- n-elems )
	use-dict
	brk-addr @   here -   bytes->elems
	use-anon
;

exception: OutOfMemory
: check-space  $( -- )
	available-space 1 <= if
		get-heap-size
		stash 0 < if
			# high bit is already set, we can't double any more,
			# and we're in danger of running into the stack and mmapped area
			OutOfMemory raise
		endif
		pop 1 shift-up set-heap-size  # double the memory
	endif
;


: bitfield $( -- 0 )    0    ;  #immediate
: end-bitfield $( n -- ) #immediate
?	dup 1 cell 8 *  <=  assertion: Bitfield overflows one cell
	drop
;

: make-bitmask $( shift width -- mask )  1 swap shift-up 1-  swap shift-up ;

: bits:  #immediate
	create  $( shift width -- shift' )
		over over make-bitmask ,
		over , dup , +
	does
;
# : bit:  ` bits:  ; #immediate

: mask   $( bits -- mask  ) @  ;
: shift  $( bits -- shift ) 1 cell after @ ;
: width  $( bits -- width ) 2 cells after @ ;
: set?        $( btld bits      -- raw   )   mask and ;
: value       $( bfld bits      -- value )   stash set?   pop shift shift-down ;
: clear-bits  $( bfld field     -- bfld' )   mask not and  ;
: set-bits    $( bfld field val -- bfld' )
	# set field of cell at addr to val
	push stash clear-bits
	pop shift pop swap shift-up
	or
;

bitfield
	2 bits: TypeFlag
	1 bits: RFlag
	2 bits: LFlag
	2 bits: IFlag
	2 bits: OFlag
	3 bits: CFlag
	1 bits: BFlag
	1 bits: IsBound
end-bitfield

0 constant: FreeType
1 constant: NodeType
2 constant: EdgeType

# 2 constant: TypeBits
# 1 constant: LabelFlagBits
# 3 constant: ColourFlagBits
# 2 constant: OFlagBits
# 2 constant: IFlagBits
# 2 constant: LFlagBits
# 1 constant: RFlagBits

# doubly-linked-list support

: _item  2 $$@  ;  # readability aids for cons
: _list  1 $$@  ;
: _next  0 $$@  ;
: cons  $( item list -- )
	dup ->first
	3 locals
?	_item assertion: uninitialised item in list insert
?	_list assertion: uninitialised list in list insert
	_next    _item .next  !   # item.next = &next 
	_list    _item .head  !   # item.head = &list
	Nothing  _item .prev  !   # item.prev = NULL
	
	_next  if   _item    _next  .prev !   endif   # first.prev = &item
	_item    _list .first !   # list.first = &item

	_list .len inc-var
?	_list ->next ->prev 0        =  assertion: First list item has non-null .prev
?	_list ->next        _item    =  assertion: Head of _list is not _item
?	_list .len @        0        >  assertion: List length should be greater than zero
?	_item ->head _list           =  assertion: _item.head doesn't point to _list
;

: _prev  2 $$@  ;  # readability aids for uncons
: _list  1 $$@  ;
: _next  0 $$@  ;
: uncons  $( item --  )
	stash ->prev  peek ->head   pop ->next
	3 locals
	_prev if
		_next   _prev .next  !    # prev.next = &next
	else
		_next   _list .first !    # list.first = &next
	endif
	_next if   _prev   _next .prev  !  endif  # next.prev = &prev
	_list .len dec-var
;


: node-signature  $( node -- sig )  .elem-flags @   TypeFlag width  shift-down   ;
: index-node      $( node --  ) stash .node-index   pop node-signature oilr-index   cons  ;
: unindex-node    $( node -- )  .node-index uncons ;


: set-edge-as-loop  $( node edge -- )
	# Put edge.edge-out-list into node.node-loops
	stash .edge-out-list  over .node-loops cons
	dup peek .edge-src !
	pop      .edge-tgt !
;
: set-edge-src  $(  src edge -- )
	# put edge.edge-out-list into node.node-out-edges
	stash .edge-out-list  over .node-out-edges cons
	pop .edge-src !
;
: set-edge-tgt  $(  tgt edge -- )
	stash .edge-in-list  over .node-in-edges cons
	pop .edge-tgt !
;

: init-node  $( elem -- node )   NodeType over .elem-flags !  ;
: init-edge  $( src tgt elem -- edge )
?	dup  host @  >   assertion: not an element in init-edge
	EdgeType over .elem-flags !
	push over over = if  # src == tgt. It's a loop
		drop peek set-edge-as-loop
	else  # it's a regular edge
		peek set-edge-tgt
		peek set-edge-src
	endif
	pop
;

: in-graph? $( addr -- bool ) host @  brk-addr @  btw?
: is-node?  $( addr -- bool ) .elem-flags @   NodeType  and  bool ;
: is-edge?  $( addr -- bool ) .elem-flags @   EdgeType  and  bool ;
: is-elem?  $( addr -- bool ) 
?	dup in-graph? if 
		.elem-flags @  TypeFlag mask  and  bool 
?	else
?		drop false
?	endif
;

# Graph element creation and deletion
: unsafe-add-node $( -- node ) alloc-elem init-node dup index-node  ;
: add-node        $( -- node ) check-space unsafe-add-node ;
: node            $( --  )     add-node drop ;

: unsafe-add-edge  $( src tgt -- edge )   alloc-elem init-edge        ;
: edge             $( src tgt -- edge )   check-space unsafe-add-edge ;

: connect-edge     $( edge -- )
	# todo
;
: disconnect-edge  $( edge -- )
	stash .edge-src @  # todo
;

: delete-node      $( node -- )   dup unindex-node     free-elem   ;
: delete-edge      $( edge -- )   dup disconnect-edge  free-elem   ;


: nodes   $( n --  )
	stash available-space  >=  if
		# if there isn't space, allocate enough...
		peek elems  grow-heap
	endif
	pop times  unsafe-add-node drop  repeat
;


: is-root?      $( elem -- bool ) .elem-flags @  RFlag set? bool  ;
: set-root-flag $( n elem -- )
	stash .elem-flags @   swap   RFlag   swap  set-bits    pop .elem-flags ! 
;

exception: ElementIsUnlabelled

: has-label?     $( elem -- bool ) .elem-flags @   BFlag set? bool  ;
: set-label-flag $( n elem --    ) stash .elem-flags @   BFlag mask   or  pop .elem-flags !  ;
: get-label  $( elem -- n )
?	dup has-label?   assertion: get-label on unlabelled element
	.elem-label @
;

: label  $( label elem --  )
	stash .elem-label !
	pop set-label-flag
;

: out-deg   $( node -- n ) .node-out-edges ->len  ;
: in-deg    $( node -- n ) .node-in-edges  ->len  ;
: loop-deg  $( node -- n ) .node-loops     ->len  ;

: canonical-out-deg  $( node -- n ) stash out-deg pop loop-deg + ;
: canonical-in-deg   $( node -- n ) stash in-deg  pop loop-deg + ;

0 constant: Uncoloured
1 constant: Red
2 constant: Blue
3 constant: Green
4 constant: Grey
7 constant: Dashed

: get-colour $( elem -- colour )  .elem-flags @  CFlag value  ;
: colour  $( colour elem -- )
	push CFlag shift  shift-up
	peek .elem-flags @  CFlag mask not  and  or # clear the old colour then set the new
	pop !
;

# : graph-elem    elems   host @   +    ; # n -- elem
: get-elem-by-id GraphElemShift shift-up  host @  swap  + ;  # n -- elem
: get-elem-id   host @ -  bytes->elems  ;  # elem -- n
: count-elems   use-dict   here get-elem-id   use-anon  ;

# bind and unbind elements
: is-bound?  $( elem -- bool )
	.elem-flags @  IsBound  set?  bool
;
? variable: bind-ops
: bind  $( elem -- )
?	dup is-elem?        assertion: Can't bind a non graph element
?	dup is-bound? not   assertion: Element already bound
	.elem-flags dup @   IsBound 1 set-bits   swap !
?	bind-ops inc-var
;
: unbind  $( elem -- )
?	dup is-bound?       assertion: Element already unbound
	.elem-flags dup @   IsBound clear-bits   swap !
;
: unbind-if-bound  $(  elem? --  )
	dup if  # test for null element
		dup is-bound? if  unbind return  endif
	endif
	drop
;

# Boolean register
: oilr-true  $( -- ) true  bool-flag ! ;
: oilr-false $( -- ) false bool-flag ! ;
: oilr-false?  $( -- bool )  bool-flag @ not ;
: oilr-true?   $( -- bool )  bool-flag @ ;

# create a search space
struct: search-space
	1 cell:  .spc-posn
	1 cell:  .spc-next-index
end-struct
: .spc-indices  search-space +  ;

: space:  #immediate
	create ( .. n -- )
		# n+1 args are consumed...
?		dup 1+ 0 stack-effect
		search-space allot
		times oilr-index ,  repeat
		0 ,      # null terminator
	does  $( -- )
;

: update-space  $( node-chain? spc -- )   .spc-posn !  ;
: space-cur     $( spc -- node-chain? )   .spc-posn @  ;
: space-reset  $( spc --  )
	push   0 peek .spc-posn !   0 pop .spc-next-index !
;

: space-adv-ind  $( spc -- )
	# advance to the next index in the search space
	stash .spc-indices   peek .spc-next-index @   cells after   @
		peek .spc-posn   !
	pop .spc-next-index  inc-var
;
: space-next-item  $( spc -- elem )
	stash space-cur dup if
		->next 
		dup peek update-space
	else
		drop peek space-adv-ind
		peek space-cur  if
			pop tail: space-next-item
		endif
	endif
	trash ->elem
;
: space-next-unbound  $( spc -- ?elem )
	stash space-next-item   dup if
		dup is-bound? if   drop pop tail: space-next-unbound   endif
	endif
	trash ->elem
	dup bool bool-flag !
;
: chain-next-unbound  $( list -- ?elem )
?	dup  assertion: null list in chain-next-unbound
	->next dup if
		dup ->elem is-bound? if   tail: chain-next-unbound   endif
	endif
	->elem
	dup bool bool-flag !  # set a return status
;
# : ->next-unbound  $( list -- list' )
# ?	dup  assertion: null list in next-unbound
# 	->next dup if
# 		dup ->elem is-bound? if  tail: ->next-unbound  endif
# 	endif
# ;


# ######   Graph output   ######################################### #

: spc 32 %c ;

exception: TODO

: _put-label # elem -- 
	dup has-label? if
		.elem-label @ %d
	else
		drop StrEmpty %s
	endif
;
: _put-colour  $( elem -- )
	get-colour ColourTable swap cells after @ %s
;

: put-node   $( elem -- )
	StrLeader           %s
		'n'             %c
		dup get-elem-id %d
		dup is-root? if RootMarker  %s endif
		StrComma        %s
		dup _put-label
		_put-colour
		StrTrailer      %s
	flush-output
;
: put-edge   $( elem -- )
	StrLeader %s   'e' %c
		dup get-elem-id %d   StrComma %s
		dup .edge-src @ get-elem-id   'n' %c %d   StrComma %s
		dup .edge-tgt @ get-elem-id   'n' %c %d   StrComma %s
		dup _put-label   _put-colour   StrTrailer %s
	flush-output
;

: dump-graph  $( -- )
	'[' putc '\n' putc
	host @
	count-elems  # number of elems
	stash times   dup is-node? if  dup put-node  endif   next-elem  repeat   drop
	'|' putc '\n' putc
	host @
	pop   times   dup is-edge? if  dup put-edge  endif   next-elem  repeat   drop
	']' putc '\n' putc
;

: maybe   $( -- bool )
	false  # todo: implementation based on pseudo-random numbers
;


# ################################################################# #

: registers  $( -- )  #immediate
	[ stash times 0 repeat   pop locals ] inline
;


: OILR   #immediate
	create $( n -- ) 
?		dup 0 >  assertion: There must be at least one OILR index
		here 2 cells before push
		dup index-size !
		2* cells allot
?		peek @   DoDoesAddr  =  assertion: created broken index
		pop _real-index !
	does  $( n addr -- addr )
		swap
?		dup  index-size @  <  assertion: requested invalid index
		2* cells after
;
: dump-graph-and-exit  ` ;  dump-graph  0-exit ;
: host-graph #immediate
?	0 0 stack-effect
?	_real-index @  assertion: Uninitialised OILR index
	` ;
	use-dict
	elem-align-dp
	here host !
	here host-free !
	' dump-graph-and-exit handles EndOfFile
	use-anon
;

? ds-depth 0 =   assertion: Unbalanced stack after graphLib


# vim:ft=oilr
