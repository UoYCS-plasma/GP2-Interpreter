: bind-and-store  $( addr elem -- )
	dup if
		dup bind
		swap !
		oilr-true
	else
		drop drop
		oilr-false
	endif
;
: break-otherwise  $( -- )
	bool-flag @ not if trash return  endif
;

: break-or-start-loop $( addr -- )
	# The loop start address is already on RS
	bool-flag @ not if  trash trash return  endif
;

# set up new behaviours for prefix instructions
: consume-args  $( n -- )
	times  word find call  repeat
;

: 1-arg-ins-handler  $( xt -- )  1 consume-args  ,  ;
: 2-arg-ins-handler  $( xt -- )  2 consume-args  ,  ;
: 3-arg-ins-handler  $( xt -- )  3 consume-args  ,  ;
: 4-arg-ins-handler  $( xt -- )  4 consume-args  ,  ;

# [ this dup putx ] as this

: looping-2-arg-ins-handler  $( xt -- ) ' this ,  2 consume-args  ,  ;
: looping-3-arg-ins-handler  $( xt -- ) ' this ,  3 consume-args  ,  ;

: #ins0 ; #immediate   # no-op for readability
: #ins1  ' 1-arg-ins-handler   set-behaviour  ; #immediate
: #ins2  ' 2-arg-ins-handler   set-behaviour  ; #immediate
: #ins3  ' 3-arg-ins-handler   set-behaviour  ; #immediate
: #ins4  ' 4-arg-ins-handler   set-behaviour  ; #immediate

: #loopins2  ' looping-2-arg-ins-handler   set-behaviour  ; #immediate
: #loopins3  ' looping-3-arg-ins-handler   set-behaviour  ; #immediate

# ######   OILR machine instructions   ############################ #

#      OILR Int          -- Number of OILR indices
#    -- Graph modification
#    | ABN Dst           -- Add and Bind Node to register Dst
#    | ABE Src Tgt Dst   -- Add and Bind Edge to register Dst between nodes in Src & Tgt
#    | DBN Dst           -- Delete Bound Node 
#    | DBE Dst           -- Delete Bound Node
#    
#    | RBN Bool Dst      -- set Root on Bound Node to Bool
#    
#    | CBL Dst Col       -- Colour Bound eLement
#    | LBL Dst Int       -- Label Bound eLement with Int

: abn   #ins1  $( dest -- )
	add-node  swap $$!
;
: abe   #ins3  $( src tgt dest -- )
	push push  $$@ pop $$@ edge   pop $$!
;

: dbn   #ins1  $( reg -- )
	$$@  delete-node
;
: dbe   #ins1  $( reg -- )
	$$@  delete-edge
;


# reverse add-node
: ran   ( <added-node> -- )
	1 take
	oilr-true? if  # commit
		drop
	else  # rollback
		delete-node
	endif
;
# reverse add-edge
: rae   ( <added-edge> -- )
	1 take
	oilr-true? if  # commit
		drop
	else   # rollback
		delete-edge
	endif
;
# reverse delete-node
: rdn   ( <deleted-node> -- )
	1 take
	oilr-true? if  # commit
		free-elem
	else   # rollback
		index-node
	endif
;
# reverse delete-edge
: rde   ( <deleted-edge> -- )
	1 take
	oilr-true? if  # commit
		free-elem
	else   # rollback
		connect-edge
	endif
;


# Undo-able instructions
: uabn  #ins1 $( dest -- )
	add-node
	dup b-push  ' ran b-push
	swap $$!
;
: uabe  #ins3 $( src tgt dest -- )
	push push $$@ pop $$@ edge
	dup b-push  ' rae b-push
	pop $$!
;
: udbn  #ins1 $( reg -- )
	$$@ dup unindex-node  b-push  ' rdn b-push
;
: udbe
	$$@ dup disconnect-edge  b-push  ' rde b-push
;


# TODO: could these be consolidated into a single tag-bound-node instruction
#  that sets bits for rootedness, colour and labelled-ness?
: rbn   #ins2  ( bool reg -- )
	$$@ ->elem  set-root-flag
;
: cbl   #ins2  ( col reg -- )
	$$@ ->elem  colour
;
: lbl   #ins2  ( lbl reg -- )
	$$@ ->elem  label
;

#    -- Graph search
#    | BND Spc Dst          -- Bind next unbound NoDe in Spc to Dst
#    | BED Reg Reg Dst      -- Bind EDge between Regs in Dir
#    | BIN Dst Dst Src      -- Bind Incoming-edge and Node from Src
#    | BON Dst Dst Src      -- Bind Outgoing-edge and Node from Src
#    | BLO Src Dst          -- Bind LOop on node in Src
#    | NEC Src Tgt          -- Negative Edge Condition from Src to Tgt


# TODO: replace with a rpop instruction that removes a number of elements
#  from the return stack?
# Save and restore return stack pointers. These _must not_ be
# words, otherwise their own return address will pollute the stack
# ' rsp@ alias: rss  # -- rsp
# ' rsp! alias: rsr  # rsp --
' trash alias: rsd

: rst #ins1  $( spc -- )
	space-reset
;

: bnd  #loopins2  ( loop-addr spc dest-reg -- )
	$$ stash @                         # -- loop-addr spc ?node
	dup if  unbind  else  drop  endif  # -- loop-addr spc
	dup space-next-unbound             # -- loop-addr spc ?node
	dup pop !  # save result to dst-reg # -- loop-addr spc ?node
	oilr-true? if
		# bind node, drop spc, inject loop-addr
?		dup is-node? assertion: bnd found an edge. 
 		bind drop inject
	else
		# drop null, reset spc, drop loop-addr, trash ret-addr
		# of bnd and return to previous looping instr
		drop  space-reset  drop trash
	endif
;

: blo  #loopins2  ( loop-addr src-reg dest-reg -- )
	$$ stash @ dup if  # if we already have an edge in dest-reg
?		dup is-edge?  assertion: blo expects an edge in dest-reg
		dup unbind   .edge-out-list  # -- loop-addr src-reg list
		nip                          # -- loop-addr list
	else
		drop  $$@  .node-loops       # -- loop-addr list
	endif
?	dup Nothing <>    assertion: null list
	chain-next-unbound dup  pop !   # store next elem (or Nothing) in dest
	oilr-true? if                    # -- loop-addr elem
		# bind elem and inject loop-addr
?		dup is-edge?      assertion: blo found a node! :(
		bind   inject
	else                             # -- loop-addr null
		# drop null, drop loop-addr, trash ret-addr of blo so that we
		# jump back to the previous looping instr
		drop drop trash
	endif
;

: bon  #loopins3   ( loop-addr src-reg eDest-reg nDest-reg -- )
	# Bind an edge with one end at node in reg in dir, storing 
	# edge in eDest and node on opposite end in nDest
	$$ stash swap $$ stash swap # -- loop src-reg e-addr n-addr
	@ dup if                    # -- loop src-reg e-addr node
		unbind                  # -- loop src-reg e-addr
		@                       # -- loop src-reg edge
?		dup assertion: bound edge cannot be null
		dup unbind                 # -- loop src-reg edge
		nip .edge-out-list         # -- loop list
	else                           # -- loop src-reg e-addr null
?		over @ Nothing =  assertion: e-dst must contain a null
		drop drop $$@ .node-out-edges  # -- loop list
	endif
?	dup Nothing <>    assertion: null list in BON
	chain-next-unbound dup  pop !  # -- loop ?edge
	oilr-true? if                  # -- loop edge
		dup .edge-tgt @  dup pop ! # -- loop edge node
		bind bind inject           # -- 
	else                           # -- loop null
		pop !
		drop trash
	endif
;

: bin  #loopins3   ( loop-addr src-reg eDest-reg nDest-reg --  )
	$$ stash swap $$ stash swap 
	@ dup if
		unbind
		@ 
?		dup assertion: bound edge cannot be null
		dup unbind
		nip .edge-in-list
	else
?		over @ Nothing = assertion: e-dst must contain a null
		drop drop $$@ .node-in-edges
	endif
? 	dup Nothing <>   assertion: null list in BIN
	chain-next-unbound dup pop !
	oilr-true? if
		dup .edge-src @ dup pop !
		bind bind inject
	else
		pop !
		drop trash
	endif
;

#  BED :: src tgt dest --
: bed   #loopins3  ( loop-addr src tgt dest -- )
	$$ stash @ dup if
		dup unbind    .edge-out-list
		nip
	else
	endif
;

: nec  #  src tgt
	# check there is no edge from src to tgt
	
;



#    -- Definitions & program structure
#    | DEF Id               -- DEFine function Id
#    | CAL Id               -- CALl Id, pushing current IP to call-stack
#    | TAR Target           -- jump TARget
#    | BRZ Target           -- BRanch if Zero (i.e. if bool flag is false)
#    | BNZ Target           -- Branch if Non-Zero
#    | BRA Target           -- Branch RAndomly. Take the branch 50% of the time.
#    | BRN Target           -- unconditional BRaNch to Target
#    | RET                  -- RETurn to IP on top of call-stack
#    | RTZ                  -- ReTurn if Zero
#    | RNZ                  -- Return if Non-Zero
#
#    -- Backtracking
#    | BBT                  -- Begin BackTracking section
#    | BAK                  -- unconditionally roll-BAcK backtracking section changes
#    | EBT                  -- End BackTracking secion: commit if flag is true, rollback otherwise
#    -- There is no rollback command. This needs to be done manually with reverse rules.
#
#    -- Stack machine
#    | BLO Dst              -- push Bound eLement Out-degree to stack
#    | BLI Dst              -- push Bound eLement In-degree to stack
#    | BLL Dst              -- push Bound eLement looP-degree to stack
#    | BLR Dst              -- push Bound eLement Rootedness to stack
#    | BLN Dst              -- push Bound eLement's Numeric label to stack
#    | BLC Dst              -- push Bound eLement Colour to stack
#
#    | SHL Int              -- SHift top-of-stack Left by Int bits
#    | OR                   -- bitwise OR top 2 values on the stack
#    | AND                  -- bitwise AND top 2 value on the stack
#
#    -- Misc
#    | NOP                  -- No-OP
#    | TRU                  -- set the boolean register to TRUe
#    | FLS                  -- set the boolean register to FaLSe


# Branch instructions
: brn  ' branch ,   ;  #immediate
: brz  ' zbranch ,  ;  #immediate
: bnz  ' not   , ' zbranch , ;  #immediate
: bra  ' maybe , ' zbranch , ;  #immediate

# Return instructions
: ret  trash ;  # pop the return address
: rtz  oilr-false? if trash endif  ;  # if false pop the return address (return from caller)
: rnz  oilr-true?  if trash endif  ;  # if true pop the return address (return from caller)

# Backtracking
: bbt  ' b-return b-push ; 
: bak  bool-flag @  oilr-false  b-call  bool-flag ! ;
: ebt  b-call  ;

# Misc
: nop ;
' oilr-true  alias: tru
' oilr-false alias: fls
' 1+ alias: inc
' 1- alias: dec
: ubr  #ins1  $( n -- )
	# Unbind element held register n
?	dup $$@  is-elem?  assertion: Attempted to unbind an invalid register
	$$@  unbind
;


# ################################################################# #

: #tgt  [ peek 1 cell after @ ] inline   ; #immediate
: -->  #tgt  edge drop ;  # src --
: ..>  #tgt  edge  Dashed swap  colour ; # src --

: -(  ; #immediate
: .(  ; #immediate
: )->  swap  #tgt edge  label ; # src label -- 
: ).>  swap  #tgt edge  stash label  Dashed pop colour ; # src label -- 

: path drop ;

? ds-depth 0 =   assertion: Unbalanced stack after instruction defs

# vim:ft=oilr
