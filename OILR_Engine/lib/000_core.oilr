true constant: DEBUG

0 constant: Nothing
9  constant: '\t'
10 constant: '\n'
27 constant: '\e'

: MB 20 shift-up ;

: #   [ '\n' = ] scan-in  ;   #immediate
# and now we have comments. Yay!


# allow aliasing of existing words without adding a
# layer of indirection
: alias:  #immediate  # ( xt -- )  ( -- )
	create-immed  ,    # store the word being aliased
	does        @ ,  # when called compile the aliased word
;

# make address manipulation more readable...
' cell alias: cells
' -    alias: before
' +    alias: after

: next-cell  here   1 cell after   ;
: prev-cell  here   1 cell before  ;

# now let's implement conditionals
: compile-jump     ,    here    0 ,  ;        #  xt -- addr
: compile-conditional-jump   ' zbranch  compile-jump ;
: compile-unconditional-jump ' branch   compile-jump ;
: jump-target   dup   here swap -   swap !  ;

variable: if-depth
: if     #immediate   compile-conditional-jump   if-depth inc-var  ;
: else   #immediate   compile-unconditional-jump   push   jump-target   pop ;
: endif  #immediate   jump-target   if-depth dec-var ;

# concatenative-style if
: ifte  # S bool then else -- T
	push push
	if pop trash else trash pop endif
	call
;

: [] [ ] ;
# debugging code is from ? to end of line
DEBUG
	[ [] ]
    [ [ [ '\n' = ] scan-in  ] ]
ifte  as ?  #immediate
# The above also shows how we can use the "as" defining word to do 
# conditional compilation. What this says is "if DEBUG is non-zero
# then define ? to be a no-op immediate word, otherwise define ? to
# be a comment to end-of-line.

# exceptions are basically just variables
: exception:   #immediate    create-variable  ;


# over-ride some basic functions with bounds-checked versions
: out-of-bounds?  # addr -- bool
	dup HeapBaseAddr  brk-addr @  btw? if drop false return endif
	    lowest-mmap @   rs0 @     btw? if false return endif
	true
;

? exception: ReadOutOfBounds
? exception: WriteOutOfBounds
? exception: CallOutOfBounds
? exception: CallToNonWord
? [  dup  out-of-bounds?  if  dup putx nl  ReadOutOfBounds  raise  endif  @  ] as @
? [  dup  out-of-bounds?  if  dup putx nl  WriteOutOfBounds raise  endif  !b ] as !b
? [  dup  out-of-bounds?  if  dup putx nl  WriteOutOfBounds raise  endif  !  ] as !
? [  dup  out-of-bounds?  if  dup putx nl  CallOutOfBounds  raise  endif call ] as call

? exception: DataStackUnderflow
? exception: DupOnEmptyStack
? exception: InvalidReturnAddr
? [  ds-depth 0 <= if  DataStackUnderflow raise  endif drop ] as drop
? [  ds-depth 1 <= if  DataStackUnderflow raise  endif swap ] as swap
? [  ds-depth 0 <= if  DupOnEmptyStack    raise  endif dup  ] as dup
# ? [  pop peek swap push  out-of-bounds? if InvalidReturnAddr raise endif  return ] as return

: while-word   # S lambda -- T
	push
	word peek call if
		pop
		tail: while-word
	else
		trash
	endif
;

: _nestable-comment  # nesting word -- nesting' bool
	1 cell after @
	stash ')' =   if
		1- trash
	else
		pop '(' = if 1+ endif
	endif
	dup bool
;

: (  #immediate  1 ' _nestable-comment while-word  drop ;

# Use the same machinery for automatic stack-signature checking

')' dup 8 shift-up or  constant: StackSigEnd
'-' dup 8 shift-up or  constant: StackSigDelim

: _stack-effect-elem  # n -- n' bool
	1 cell after @
	stash ')' =  if
		trash false return
	else
		pop StackSigDelim = if false return endif
	endif
	1+ true
;
# : $( #immediate
# 	0 ' _stack-effect-elem while-word  compile-literal 
# 	0 ' _stack-effect-elem while-word  compile-literal
# 	` stack-effect
# ;

DEBUG
	[ [ 0 ' _stack-effect-elem while-word  compile-literal
	    0 ' _stack-effect-elem while-word  compile-literal
		` stack-effect ] ]
	[ [ 1 ' _nestable-comment while-word  drop ] ]
ifte   as $(  #immediate


# Imperative looping
: times      #immediate   ( -- exit-addr loop-addr )
	' push ,					# push i
	here   ' peek ,				# this is where we jump back to
	compile-conditional-jump    # jump out of loop if i==0
	' pop , ' 1- , ' push ,     # decrement the counter
	swap                        # leave NoS:exit-jump ToS:start-of-loop
;
: forever    #immediate   ( -- exit-addr loop-addr )
	-1 compile-literal
	' push ,   here   ' peek ,
	compile-conditional-jump
	swap
;
: repeat     #immediate    ( exit-to-addr start-of-loop  -- )
	next-cell -    compile-unconditional-jump   !
	jump-target
	' trash ,
;


# buffered output

1000 cells buffer constant: OutputBufferStart
variable: output-buffer
OutputBufferStart output-buffer !
: %s  $( s -- )
	# copy a string into the output buffer
	dup @ push # length
	1 cell after   peek   output-buffer @   copy-bytes
	pop   output-buffer @   +   output-buffer !
;
: %c  $( c -- )
	# copy a char into the output buffer
	output-buffer @ !b
	output-buffer inc-var
;
: _c 
	dup if
		%c tail: _c
	endif
	drop
;
: %d  $( n -- )
	# copy an int into the output buffer
	dup 0 < if
		neg
		'-' %c
	endif
	10 decompose
	_c
;
: clear-output   $( -- )  OutputBufferStart output-buffer !   ;
: flush-output   $( -- )
	0   output-buffer @   ! # guarantee null-termination
	OutputBufferStart putz
	clear-output
;


# debugging helper
: backtrace  $( -- )
	rs0 @ rs-depth times
		1 cell before dup @
		'spc' putc
		dup in-dict? if
			addr-to-label puts
		else
			putx
		endif
	repeat nl
;
# ? [ backtrace raise ] as raise

# lambda inliner (saves lots of ' work , in immediate words)
: inline  $( lambda -- )
	stash data-length CellBits shift-down  2 -
	pop   1 cell after
	swap keep drop
;

: set-behaviour  $( xt -- )
	# set xt to be the behaviour for the most recently defined word
	dictionary @ .bfa   !
;
# handy stack-effect checker...

# exception: StackCheckFailed
# variable: Sentinel  # we're using the address as a sentinel constant.
# : check-stack  # --
# 	pop exhume
# 	Sentinel <> if 
# 		pop puts  nl
# 		StackCheckFailed raise
# 	endif
# 	trash
# ;
# : stack-effect  #immediate
# 	dictionary @  .label  compile-literal
# 	[	push push          #  n-in n-out str -- 
# 		Sentinel swap bury
# 		' check-stack 1 cell after push ]  inline
# ;

# assertions

exception: AssertionFailed
: assertion-failed
	WarningColour output-colour putz 
	NoColour output-colour
	AssertionFailed raise
;
: assertion:  #immediate
	' Zero , ' = , compile-conditional-jump 
	begin-data-block
	[ dup ,b  '\n' = ] scan-in   0 ,b
	end-data-block
	' assertion-failed ,
	jump-target
;

# structs

: struct: #immediate
	create
		here 0 , 0 
	does
		@  # returns size-of structure when called
;
: bytes:        #immediate
	create  # offs size
		over , +
	does
		@ +
;
: cells:        #immediate
	create  # offs n
		over ,  cells +
	does
		@ +
;
: cell: #immediate
	` cells:
;
: end-struct  ` ; swap ! ;  #immediate # save the struct size

? ds-depth 0 =   assertion: Unbalanced stack after util library compilation


# vim:ft=oilr
