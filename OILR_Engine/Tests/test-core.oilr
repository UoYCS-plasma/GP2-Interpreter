# Test our assertion handler

: stack-effect-correct  $( x y -- z )
	drop drop -1
;
: stack-effect-failure-(ok)  $( x y -- z )  # deliberately wrong
	drop drop
;

: catch ; 
' catch handles AssertionFailed
	0 1   test: Exceptions (should fail)
Nothing handles AssertionFailed


Testing Stack-checker
	1 2 stack-effect-correct  -1  test: stack-effect-correct
	' catch handles StackCheckFailed
?	1 2 stack-effect-failure-(ok)  Sentinel  test: stack-effect-incorrect
	Nothing handles StackCheckFailed
;
ds-depth 0 test: stack-depth after test-core
Testing Constants
	'\t' 9     test: Tab constant
	'\n' 10    test: Newline constant

Testing Locals
	88 77  2 locals
	0 $$ @       77         test: local + fetch
	0 $$@        77         test: local-fetch
	0 $$ @       0 $$@      test: local fetch equivalency
	99  0 $$ !
	0 $$@        99         test: local + store
	99  1 $$!
	1 $$@        99         test: local-store

unframe

Testing Unit conversion
	1 MB   1024 dup *     test: MB suffix
	1 cell 4              test: Cell size

Testing Arithmetic
	1  1 +  2    test: Basic addition
	10 2 * 20    test: Basic multiplication
	1 1+    2    test: Increment
	1 1-    0    test: Decrement
	-2 2*  -4    test: Doubling negatives
	-4 2/  -2    test: Halving negatives

ds-depth 0 test: stack-depth after test-core

nl
# ds-depth 0 =  assertion: Stack unbalanced
0-exit

# vim:ft=oilr
