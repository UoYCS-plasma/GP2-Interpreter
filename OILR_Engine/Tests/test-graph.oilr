# Test graph manipulation functions

ds-depth 0  = assertion: stack empty at start of graph test

Testing Theoretical maximum number of graph elements:
	'\t' putc TheoreticalMaxGraphSize putn 

Testing Sizes of data structures
	dl-list       2 cells   test: size of dl-list
	dl-list-item  3 cells   test: size of dl-list-item
	graph-elem    2 cells   test: size of graph-elem
	graph-node   graph-elem  dl-list-item  dl-list 3 *  +  +  test: graph node size

	graph-node GraphElemSize <  true  test: node too large
	graph-edge GraphElemSize <  true  test: edge too large
;

Testing Doubly-linked list accessors
	0 .next  0  test: .next
	0 .head  4  test: .head
	0 .prev  8  test: .prev
	0 .len   4  test: .len
;

ds-depth 0  = assertion: stack empty at end of graph test


: doubly-linked-list: #immediate
	create
		dl-list allot
	does
;
: doubly-linked-list-item: #immediate
	create
		dl-list-item allot
	does
;
doubly-linked-list: list
doubly-linked-list-item: item1
doubly-linked-list-item: item2
doubly-linked-list-item: item3

ds-depth 0  = assertion: stack empty at end of graph test

Testing Empty list
	list ->len    0       test: List length zero
	list ->first  Nothing test: List is empty
;

Testing List insertion
	item1 list cons
	list ->len    1       test: list length 1
	list ->first  item1   test: list has item1
	list ->first ->next
	              Nothing test: singlet null terminator

	item2 list cons
	list ->len    2       test: list length 2
	list ->first  item2   test: list first item2
	list ->first ->next
	              item1   test: list next item1

	item3 list cons
	list ->len    3       test: list length 3
;
Testing List deletion
	item2 uncons
	list ->len           2     test: uncons to 2
	list ->first ->next  item1 test: item1 after uncons

	item1 uncons
	list ->len    1       test: uncons to 1
	list ->first  item3   test: item3 at head

	item3 uncons
	list ->len    0       test: uncons to 0
	list ->first  Nothing test: list empty again
;

bitfield
	1 bits:  Pugh
	2 bits:  Pugh'
	1 bits:  Barney-McGrew
	1 bits:  Cuthbert
	3 bits:  Dibble
	1 bits:  Grub
end-bitfield

Testing Bit-fields
	Pugh shift         0   test: Pugh shift
	-1 Pugh set?       1   test: Pugh mask
	1 Pugh clear-bits  0   test: Pugh clear-bits 1
	-1 Pugh clear-bits -2  test: Pugh clear-bits 2
	0 Pugh 1 set-bits  1   test: Pugh set-bits

	Pugh' shift         1   test: Hugh shift
	-1 Pugh' set?       6   test: Hugh mask
	-1 Pugh' value      3   test: Hugh value
	0  Pugh' 1 set-bits 2   test: Hugh set-bits 1
	0  Pugh' 2 set-bits 4   test: Hugh set-bits 2
	0  Pugh' 3 set-bits 6   test: Hugh set-bits 3
	
	Barney-McGrew shift 3  test: Barney-McGrew shift

	-1 Grub set?       1 8 shift-up  test: Grub mask
	-1 Grub value      1             test: Grub value
;
Testing Global boolean register
	oilr-false
	bool-flag @     false  test: oilr-false
	oilr-true
	bool-flag @     true   test: oilr-true
;
ds-depth 0  = assertion: stack after graphLib boolean test

1 OILR index
0 1 space: s0

Testing Host graph node creation
	host-graph   # WARNING: No defs from here on!
	host @   dict-ptr @   test: dict-ptr has changed
	host @   host-free @  test: non-empty graph
	2 nodes
	0n ->elem      0n     test: 0n alignment
	1n ->elem      1n     test: 1n alignment
	0n get-elem-id    0      test: 0n has id 0
	1n get-elem-id    1      test: 1n has id 1
	0 get-elem-by-id  0n     test: id 0 is 0n
	1 get-elem-by-id  1n     test: id 1 is 1n
	0n                host @ test: 0n addr same as host
	0n is-node?       true   test: 0n is a node
;
Testing Host graph node binding
	0n is-bound?      false  test: 0n not yet bound
	0n bind
	0n is-bound?   true   test: bind 0n 
	0n unbind
	0n is-bound?   false  test: unbind 0n
?	bind-ops @     1      test: 1 bind op logged
;
( Testing List traversal
	0n --> 1n --> 1n  path
	0n .node-out-edges ->len    1     test: 0n.out-edges
	0n .node-in-edges  ->len    0     test: 0n.in-edges 
	0n .node-loops     ->len    0     test: 0n.loops
	1n .node-out-edges ->len    0     test: 1n.out-edges
	1n .node-in-edges  ->len    1     test: 1n.in-edges
	1n .node-loops     ->len    1     test: 1n.loops )
	
Testing Search spaces
	s0 .spc-posn @                0        test: s0 pos 0
	s0 .spc-next-index @          0        test: s0 next-ind 0
	s0 .spc-indices @             0 index  test: s0 first entry is an OILR ind
	s0 space-next-item         1n       test: first item in s0 is 1n
	s0 space-next-item         0n       test: second item in s0 is 0n
	bool-flag @                true     test: oilr-true after next-item
	s0 space-next-item         Nothing  test: third item in s0 is Nothing
	s0 space-reset
	s0 space-next-item         1n       test: s0 has 1n after reset

	s0 space-reset   1n bind
	1n is-bound?                true    test: 1n is bound
	s0 space-next-unbound         0n    test: 0n is first unbound
;

Testing Host graph edge creation
	0n --> 1n  path
	2e is-edge?    true   test: 2e is an edge
	2e ->elem      2e     test: 2e alignment

	2e ->src ->elem 2e ->src test: 2e src is elem aligned
	2e ->src       0n     test: 2e source
	2e ->tgt       1n     test: 2e source
	0n out-deg     1      test: 0n out degree
	0n in-deg      0      test: 0n in deg
	0n loop-deg    0      test: 0n loop deg
	0n canonical-out-deg 1 test: 0n read out deg

	1n out-deg     0      test: 0n out degree
	1n in-deg      1      test: 0n in deg
	1n loop-deg    0      test: 0n loop deg

	0n --> 0n --> 0n   path
	0n out-deg     1      test: 0n out deg (loops)
	0n in-deg      0      test: 0n in deg (loops)
	0n loop-deg    2      test: 0n loop deg (loops)
	0n canonical-out-deg 3 test: 0n real out deg (loops)
;


ds-depth 0  = assertion: stack after graphLib test


nl 0-exit ;

# vim:ft=oilr
