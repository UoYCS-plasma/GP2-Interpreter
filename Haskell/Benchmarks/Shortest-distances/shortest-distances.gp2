Main = init; add!; reduce!

init (x: list) [
(n1, x # grey) | 
] => [
(n1, x:0 # grey) | 
]
interface = {n1}


add (x, y: list; m, n: int) [
(n1, x:m # grey) (n2, y) | (e1, n1, n2, n) 
] => [
(n1, x:m # grey) (n2, y:+m n # grey) | (e1, n1, n2, n) 
]
interface = {n1, n2}


reduce (x, y: list; m, n, p: int) [
(n1, x:m # grey) (n2, y:p # grey) | (e1, n1, n2, n) 
] => [
(n1, x:m # grey) (n2, y:+ m n # grey) | (e1, n1, n2, n) 
]
interface = {n1, n2}
where + m n < p
